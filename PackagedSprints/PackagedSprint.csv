Work Item Type,Title 1,Title 2,Title 3,Title 4,Description,Acceptance Criteria,Priority,tags
Epic,DevSecOps,,,,"This Epic, as created by CSE Core DevOps' packaged sprint, is meant to guide engineers through adding DevSecOps practices to their workflow. In some scenarios third party tooling is required in order to achieve the scenario. We have tried many tools out in these scenarios and our selected tools are simply a recommendation but typically the scenario can be fulfilled with a variety of tools that offer similar functionality and capabilities.",This Epic can be considered complete once the engineering team has create all of the appropriate tooling as decided by the development team. This epic is meant to be suggestive of good DevSecOps practices and depending on the specifics of the project all of the Features will not be a good fit. Those deemed incompatiple by the project team should be closed with reason given during sprint planning cycle when the packaged sprint is added to the project board in Azure DevOps.,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Feature,,Plan for DevSecOps,,,"Shifting left is a team sport! <br> Although the Packaged Sprint for DevSecOps has introduced features to drive adoption into your project boards, the team must be ready to adopt the concepts and patterns that are conducive drivers of the process. <br> This planning feature is designed to facilitate understanding, discussion, and some decisions to begin the work of Shifting Left. ",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
User Story,,,Introduce DevSecOps,,As a project team we need to make a choice on what Workflow Pattern best fits with our process and CI strategy. ,,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Hold Team Discussion on DevSecOps,"The DevSecOps Packaged Sprint injects options on how to incorporate tooling and get feedback into ADO, which facilitates the adoption of DevSecOps.  Yet, without some understanding of the basic concepts, this could become a hollow endeavor. <br> Review the README file included with the packaged sprint materials with the engineering team and project participants and decide how to Shift Left. <br> As part of this task, the team should make choices on which workflow pattern best fits: the project goals and team style.  Be sure to note the choice and key discussion points so that the team is always able to gain understanding into the approach.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Prepare ADO for Chosen DevSecOps Workflow,"After selecting the workflow pattern that best fits your project, prepare ADO for that pattern. For instance, you may need to increase the number of available agents or create a pipeline that will serve as the root to tie DevSecOps dependencies together or create a directory that will hold templates for simplifying the main security pipeline.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Review Packaged Spring Stories and Features,"The DevSecOps Packaged Sprint suggests some practices that have been useful in many projects looking to improve feedback on good coding practices into security-minded teams. However, all of the tools may not be a fit for every project. Ultimately, the project team is responsible for deciding what fits. <br> Review the features imported with the Packaged Sprint (search #PackagedSprint or #DevSecOps in ADO) to make sure that all of the toolings fit with the project from both a tech-stack and cost perspective. In areas where other tools are a better-fit, update the related stories. For stories that don't belong, please make a note of why the specific scenario doesn't fit the project and close them out.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Feature,,Credential and Secret Scanning,,,Improve security in development process by addiing automated credential scanning into the projects Azure DevOps Project. ,A selection of tools has been added to the projects CI/CD automation to automate the discovery of Credentials in the source code.,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
User Story,,,Add CredScan,,"As an engineer I want clear indicators if my code is intoducing passwords or other credential information. This can be accomplished using the CredScan extension included in the <a href=""https://aka.ms/mscadocs"">MSFT Secure Develoment Tools Extension</a>. Details on the scenario of adding the CredScan Extension to AzDo can be found in the CSE-DevSecOps documents <a href=""https://github.com/microsoft/CSEDevSecOps/tree/master/Scenarios/CredentialScanning"">here</a>",Associated tasks are completed in order: <ol><li>Request access to secure development tools</li> <li>Create pipeline for credential scanning</li><li>Review result and initial remediation/suppressions</li><li>Add branch policy for CredScan</li></ol>,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Request access to Secure Development Tools,"Ensure that the Secure Development Tools Extension is installed in the organization by following the guidance found here: <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/CredentialScanning/RequestAccessAndInstall.md"">Process Guidance</a>. Once the SDT team has provided access to the extension ensure that it is installed in the organization. The installation requires an AzDO admin.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Create pipeline for credential scanning,"Create a pipeline that will add the CredScan tool to AzDO once the extension is installed. A sample pipeline can be found <a href=""https://github.com/microsoft/CSEDevSecOps/tree/master/pipelines/CredScanning"">here</a>. ",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Review results and initial remediation/suppressions,"After creating the pipeline an initial run will identify any secrets currently found in the source code and fail the build if any are found. Use the report attached to your build to review those secrets and find those discovered secrets. Although it is highly recommended that no secrets be included in the source code it is possible to add <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/CredentialScanning/Suppressions.md"">suppressions</a> (exclusions) to CredScan that will pass your build while leaving any secrets that the team had decided to leave in the code.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Add branch policy for CredScan,"Once CredScan is rolled into a pipeline you should make sure that discovery of secrets is automated in the future. This can be done on <a href=""https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops"">Azure DevOps</a> as well as <a href=""https://help.github.com/en/github/administering-a-repository/defining-the-mergeability-of-pull-requests"">GitHub</a>",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Feature,,Dependency and Container Scanning,,,"When selecting third-party components (both commercial and open source) it’s important to understand the impact that a vulnerability in the component has on the overall security of the system. Software Composition Analysis tools can assist with licensing exposure, provide an accurate inventory of components, and report any vulnerabilities with referenced components. This applies to dependencies at both component and container level. The DevSecOps Packaged Sprint has created stories for adding several of these tools to your CI/CD workflow. Use all of none of the suggested tools as decided by your project team during planning. If the suggested tools don't fit with your project select others as appropriate. <br>Complete guidance provided by the CSE DevOps team can be found <a href=""https://github.com/microsoft/CSEDevSecOps/tree/master/Scenarios/DependencyContainerScanning"">here</a>.",Appropriate tooling and extensions to ensure project standards on third-party tooling has been incorporated into the CI/CD workflow. ,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
User Story,,,Add WhiteSource Code Dependency Scanning,,"As an engineer concerned with creating a secure project I understand that identification of vulnerabilities in third-party libraries is of utmost concern and I want to add identification of those vulnerabilities to by CI automation by incorporating WhiteSource into the project. <br> More informaiton on this scenario can be found <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/whitesource/WhiteSource-Dependency.md"">here</a> and through following the tasks attached to this story.","Associated tasks are completed in order: <ol><li>Request or Have Customer Request WhiteSource Account</li><li>Create an ""Admin"" user for WhiteSource</li><li>Create hierarchy in WhiteSource portal</li><li>Link WS & AzDO</li><li>Add WS Configuration to Source</li><li>Configure Azure DevOps for WhiteSource</li></ol>",1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Request or Have Customer Request WhiteSource Account,"Before WhiteSource (WS) can be used an account must be created. WhiteSource should be contacted directly. Email <a href=""mailto:ryan.harrington@whitesource.com"">Ryan Harrington</a> with WS to request the account be created. Ryan will work with the project team to set up a trial to get the project moving forward while a billing details are arranged.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,"Create an ""Admin"" user for WhiteSource","In order to complete later steps in the configuration of WhiteSource an ""Admin"" user must be created in WhiteSource. Multilple users can be created and added to the Admin group that already exist in WhiteSource accounts. <br> First <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/whitesource/WhiteSource-Setup.md#add-users"">create a user</a>. Next <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/whitesource/WhiteSource-Setup.md#add-users-to-admin-group"">add the user to that admin group</a>.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Create hierarchy in WhiteSource portal,"WhiteSource provides the logical groups of ""Product"" and ""Project"" for configuration. Before the source code scans can be useful for getting the desired feedback to the projects team you will need to <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/whitesource/WhiteSource-Setup.md#add-product"">create at least one product</a>. Once you have the product configured in whitesource you can <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/whitesource/WhiteSource-Setup.md#add-projects"">add projects</a> to it.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Link WS & AzDO,"WhiteSource can hook directly into AzDO allowing for breaking builds that do not meet configured <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/whitesource/WhiteSource-Setup.md#shorten-the-feedback-loop--connect-azure-devops-to-whitesource"">policies</a> and automating the creation of task that violate those defined policies.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Add WS Configuration to Source,"Add a config file for whitesource to you source code. The default config file can be <a href=""https://s3.amazonaws.com/unified-agent/wss-unified-agent.config"">downloaded from whitesource</a>. The CSE DevOps teams has included the minimum configuration requirments <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/whitesource/WhiteSource-Dependency.md#minimum-configuration-details"">here</a> to help get the config configured quickly. The sample provided by the CSE team provides details for CSharp/Nuget inclusions but details on other types can be found <a href=""https://whitesource.atlassian.net/wiki/spaces/WD/pages/489160834/Unified+Agent+Configuration+File+Parameters"">here</a>.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Configure Azure DevOps for WhiteSource,"<a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/whitesource/WhiteSource-Dependency.md#configure-azure-devops"">Add WhiteSource to Azure DevOps</a> to automate as part of the CI workflow. <br> A <a href=""https://github.com/microsoft/CSEDevSecOps/tree/master/pipelines/DependencyScanning"">sample pipeline</a> has been provided by the CSE DevOps team as part of the Packaged Sprint.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
User Story,,,Add Aqua Container Scanning,,"As an engineer I want to identify vulnerable images for the security of the projects containerized applications. The CSE-DevSecOps Packaged Sprint included <a href=""https://github.com/microsoft/CSEDevSecOps/tree/master/Scenarios/DependencyContainerScanning/aqua"">guidance</a> on how to automate this type of scan using AquaSec tools and extensions in Azure Devops. This story should be completed if my team has decided that AquaSec is a good fit for our project.","Associated tasks are completed in order: <ol><li>Request AquaSec Account</li> <li>Setup Aqua PreReqs</li><li>Prepare AquaSec</li><li>Integrate AquaSec with Azure Container Registry and Scan</li><li>Create the 3 required Service Connection in ADO</li><li>Configure ADO pipeline for leveraging Aqua</li><li>Complete additional steps for Windows, Self-Hosted Scanning</li></ol>",1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Request AquaSec Account,"In order to use AquaSec in my CI/CD pipeline I first need to arrange an account with the AquaSec team. This process is initiate by contacting an AquaSec Rep. <br> Contact <a href=""mailto:tilaky@aquasec.com"">Tilak Yalamanchili</a> to inquire about licensing and get started.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Setup Aqua PreReqs,"In order to get going with AquaSec there are a few <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/InstallAquaOnAKS.md#prerequistes"">pre-reqs</a> that must be completed.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Prepare AquaSec ,"<a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/InstallAquaOnAKS.md#prepare-your-aks-cluster-for-connecting-to-the-aqua-registry"">Prepare the AKS cluster</a> I created as a pre-req to work with AquaSec. <br> After preparing the cluster <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/InstallAquaOnAKS.md#configure-the-aqua-security-dashboard"">retrieve the connection details for the AquaSec installation</a> and <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/InstallAquaOnAKS.md#wrapping-up"">login to create a password</a>. ",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Integrate AquaSec with Azure Container Registry and Scan,"Once I have an AquaSec installation (previous tasks) I can <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/Aqua.md#configure-azure-container-registry-integration"">configure the integration between Aqua and my ACR</a>. Having established that connection I can <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/Aqua.md#scan-acr-images"">proceed with an initial, manual scan of the images in my ACR</a>. Ultimately, it would be nice to exclude vulnerable images from ACR during CI but I need to start by identifying the vulnerabilities already out there. After completing the scan I can <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/Aqua.md#review-scan-results"">review the results</a> to see where my currently available iamges have known vulnerabilites. ",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Setup Aqua Assurance Policies,"Having previously setup Aqua and preformed an initial scan I can <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/Aqua.md#configuring-assurance-policies"">add Assurance Policies</a> that will makes sure that I am not pushing additional vulnerabilities to my ACR.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Create the (3) required Service Connection for Aqua in ADO,"Before I can automate scanning of my new images and make sure that I am not making vulnerable images available downstream I need to create 3 service connections in Azure DevOps. <br> <ul><li><a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/Aqua.md#1-azure-container-registry-service-connection"">Azure Container Registry Service Connection</a></li><li><a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/Aqua.md#2-aqua-container-registry"">Aqua Container Registry Service Connection</a></li><li><a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/Aqua.md#3-aqua-management-console"">Aqua Management Console Service Connection</a></li></ul> ",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Configure ADO pipeline for leveraging Aqua,"After all of the tasks for getting AquaSec container scanning setup have been completed I can <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/Aqua.md#configure-the-aqua-task-in-a-ci-pipeline-in-azure-devops"">create a pipeline</a> that will allow automation of image scanning through branch policies in Azure DevOps. <br> A <a href="""">sample pipeline</a> has been provided by the CSE DevOps team as part of the Packaged Sprint to guide the creation.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,"Complete additional steps for Windows, Self-Hosted Scanning","<a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/DependencyContainerScanning/aqua/Aqua.md#windows-container-scanning-with-ci-on-a-self-hosted-agent"">Additional steps for Windows</a> are required for setting up AquaSec scanning on Windows self-hosted agents for AzDO.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Feature,,Pentration Testing,,,"Penetration testing is a vital part of defensive security that can help to identify vulnerabilities and plan mitigation efforts. By shifting parts of this effort into the Dev(Sec)Ops, Pipeline teams can prevent many vulnerabilities from getting beyond the developer's arena, thereby ensuring more reliable and better performant systems with less downtime and easier maintenance. Information on this <a href=""https://github.com/microsoft/CSEDevSecOps/tree/master/Scenarios/PenetrationTesting"">scenario</a> has been provided by the CSE DevOps team as part of the DevSecOps Packaged sprint and a <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/pipelines/PenTesting/extensionPipeline.yml"">sample pipeline</a> has been provided.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
User Story,,,Add OWASP ZAP Scanning,,As an engineer looking to improve the security of the teams application efforts I want to add quick feedback on easy to find security vulnerabilities that can be discovered through automated OWASP penetration testing.,Associated tasks are completed in order: <ol><li>Install the OWASP/ZAP extension</li><li>Create an Appropriate linux pipeline</li></ol>,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Install the OWASP/ZAP Extension,"Install the CSE-DevOps created <a href=""https://marketplace.visualstudio.com/items?itemName=CSE-DevOps.zap-scanner"">extension</a> into your organization.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Create an appropriate linux pipeline,"Create a pipeline following the <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/PenetrationTesting/Yml_Pipeline_Extension.md#create-a-pipeline-on-a-linux-agent-pool"">guidance</a> provided by the CSE DevOps team as part of the Packaged Sprint. The <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/PenetrationTesting/Yml_Pipeline_Extension.md#add-in-the-steps-to-run-the-owaspzap-scanner"">steps</a> for scanning are simple and an <a href=""https://github.com/microsoft/CSEDevSecOps/blob/package-sprints/pipelines/PenTesting/extensionPipeline.yml"">example pipeline</a> has been included in the packaged sprint materials.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Feature,,Static Code Analysis,,,"Static code analysis is a vital part of the journey to creating a secure project. Combined with good Code Review practices the automation of code analysis can help to identify code level issues that could lead to problems later in a projects release cycle. The goal identified for the Packaged Sprint is to catch problems in an engineers contributions to source code before pull-request thereby improving the feedback time without disrupting the teams overall flow. Guidance provided by the CSE DevOps team for this security scenario can be found <a href=""https://github.com/microsoft/CSEDevSecOps/tree/package-sprints/Scenarios/StaticCodeAnalysis"">here</a>.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
User Story,,,Add SonarCloud Static Code Analysis,,"As a member of a security-conscious engineering team, I want the added security of static analysis from Sonarcloud to find vulnerabilities as part of the Pull Request before engaging another team-members time to review my code. ",Associated tasks are completed in order: <ol><li>Setup a Sonarcloud account</li><li>Integrate Sonarcloud with ADO</li><li>Configure Quality Gate</li><li>Add Sonarcloud Build Breaker</li><li>Create PR Comments Extension</li></ol>,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Setup a Sonarcloud account,"Follow the <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/StaticCodeAnalysis/SonarCloud.md#setup-sonarcloud"">setup steps</a> required to get Sonarcloud account and project created.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Integrate Sonarcloud with ADO,"Create the <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/StaticCodeAnalysis/SonarCloud.md#setup-ado-integration>integration</a> between ADO and Sonarcloud. This integration requires an admin to install the Sonarcloud extension in ADO. A sample pipeline can be found <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/pipelines/StaticCodeAnalysis/SonarCloud.yml"">here</a>.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Configure Quality Gate,"Configuring a Quality Gate in Sonarcloud is vital to failing fast and catching vulnerabilities that aren't acceptable. <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/StaticCodeAnalysis/SonarCloud.md#setting-up-quality-gate"">Configure quality gate</a> as appropriate for the projects goals.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Add Sonarcloud Build Breaker,"The first step in failing often is having the failure block moving forward. To facilitate this <a href=""https://marketplace.visualstudio.com/items?itemName=SimondeLang.sonarcloud-buildbreaker"">install the Sonarcloud build breaker extension</a>.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Configure ADO to create work item,"In order to incorporate good feedback from the Sonarcloud analysis into the teams workflow take advantage of the work item generations available in ADO by <a href=""https://github.com/microsoft/CSEDevSecOps/tree/master/Scenarios/Workflow#using-create-work-item-extension"">configuring work item creation.</a>",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Create PR Comments Extension,"As noted <a href=""https://github.com/microsoft/CSEDevSecOps/blob/master/Scenarios/StaticCodeAnalysis/SonarCloud.md#eliminate-false-positives"">here</a> Sonarcloud does generate false-positives on vulnerabilites and that can become troublesome to workflow because marking false-positives in Sonarcloud requires admin access. As an alternative <a href=""https://github.com/microsoft/CSEDevSecOps/tree/master/Scenarios/Workflow#using-pr-comments-extension"">create a bot</a> that can allow engineers to mark false positives as part of the PR workflow.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Feature,,Enforce Org Security Policy,,,"Policy injection offers the opportunity to enforce policy during pipeline execution. In Azure Devops, policy is set at the organizational level. There are a number of scenarios and tools that can be used to enforce these policies. More information on these scenarios can be found <a href=""https://github.com/microsoft/CSEDevSecOps/tree/package-sprints/Scenarios/EnforceOrgSecurityPolicy"">here</a>.",Policy automation has been added to the project as decided on by the team during planning,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
User Story,,,Add policy governance,,"As an engineer, I want to ensure that my submissions are in line with the policies defined for my project to prevent technical debt that can be avoided. There are several paths that can help with this in ADO",,,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Create pipeline decorators to enforce desired policies,"For policies that are considered vital to enforce on any project <a href=""https://github.com/microsoft/CSEDevSecOps/tree/master/Scenarios/EnforceOrgSecurityPolicy#pipeline-decorators"">create one or more pipeline decorators</a> as appropriate for the policies.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
Task,,,,Enforce OSS policies with component governance,"As appropriate take advantage of <a href=""https://docs.microsoft.com/en-us/rest/api/azure/devops/componentgovernance/?view=azure-devops-rest-5.1"">component governance</a> to regulate OSS compenents in your project.",,1,#DevSecOps; #PackagedSprint; #CSEDevOps;
